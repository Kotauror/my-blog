<%- include ../partials/header.ejs %>
<div class="likes">
  <%- include('../partials/likes-form.ejs', {value: 21}); %>
  Likes so far: <%= likesCount %><br>
  <a href="/"> Back to main page <i class="fas fa-home"></i></a>
</div>

  <main>
  <div class="article-title">Pairing tour week 1</div>
  <div class="sub-title">What I've learned during a week of pairing with 8th Light crafters</div>

  My first week of pairing tour is over.
  Each day I've paired with a different 8th Light crafter on a project they currently work on.
  Each day brought different experiences and learnings that I would like to talk about in this post.

  <div class="article-section"> Day 1 - International reinsurance corporation </div>

On the day 1 I've joined two 8th Light crafters at an office of an international reinsurance corporation. <br><br>

I was sooo stressed in the morning. Not only this is my first time working for a client as a software developer, but also first time working solely in English.
An overwhelming office in the city (one of the lovely glass & steel buildings) didn't really help. <br><br>

There were some reasons for me to be afraid of this day. First of all, I was afraid I won't be of use, that I won't know what's going on and will only be a
5-th wheel that won't be able to articulate thoughts.
Moreover, I was afraid to work in a language I don't know and that it will make me stare at the screen pretending I know what's going on.
Finally - classic impostor syndrome - I was afraid that a whole day of pairing with experienced software developer will reveal that I'm actually not
a promising apprentice, but, well, fill the blank for yourself.<br><br>

Thankfully, it all turned out to not be true, and I had a great time!<br><br>

The crafters I paired on the day one explained to me the product they are working on, mostly the DevOps side of it. I have very little experience with AWS, so it was a very
valuable lesson to me. My partners were manually testing one of the features in different environments. I didn't really participate much in this demo,
instead was "just" trying very hard to draw in my head a map of connections between all of the elements so that I will be able to help them with the stories later.<br><br>

Then we kicked off with the stories. After finishing the first one that was connected to the demo and was a bit of ctrl+c ctrl+v, we moved to changing regex that decides what is allowed in JSON.
I was so happy that I've managed to help with it! From googling the regex we want, to helping with running the tests and debugging the errors -
I felt a very useful part of the team, actually contributing to the stories and helping to wrap them up faster.<br><br>

That day I've also learned how to use Swagger and started understanding the flow of switching between the different environments.

<div class="article-section-2"> Key learnings </div>

I've learned that I need to learn a loooooot about DevOps - and thankfully I'll have a chance to do it by the end of my apprenticeship!<br>
Apart from AWS and Swagger, the biggest learnings for me from that day were rather social than technical.<br><br>
First of all, I've managed to find a golden ratio between being an active participant (asking questions, proposing solutions) and being an overactive,
overly talkative person that prevents others from working by talking the whole time. I believe that there is a huge value in listening to others,
especially people who have more experience, and because of that I let my partners talk all the time and tried to speak only when I had a good reason to do it.
Don't get me wrong, I'm not saying that you should stay mute when pairing with more experienced people, just try to listen more than you speak :)<br><br>

Secondly, the crafters I paired with were amazingly calm when facing problems. I didn't see any anger or sadness in them during an hour long debugging.
I've honestly admired their attitude and I hope that I will become such a calm and confident crafter as they are.

<img src="https://cdn.vox-cdn.com/thumbor/BhF_IqIFcuzdRhHLiC8panve7PU=/33x0:574x304/1600x900/cdn.vox-cdn.com/uploads/chorus_image/image/50310263/658.0.0.png" width="100%"><br>
<div class="article-section"> Day 2 - let's get a new client! </div>

The day two was totally different from the day one. I've spend the whole time with one crafter with whom I was writing a proposal of providing two types of services to a potential client.
It was a great and very valuable experience! Many people at 8th Light tend to be sorry when they cannot provide a big amout of coding to the apprentice
during the pairing tour. I believe they shouldn't be - to be a successful consultant means much more than writing a quality code. It's providing documents,
interacting with clients, finding answers in legacy code and all other "soft" stuff.<br><br>

My partner and analysed the information provided by the potential client in order to:<br>
- make a diagram of a potential architecture of the system;<br>
- described all of the elements of the architecture;<br>
- discussed the pros and cons of different solutions;<br>
- estimate the time needed to deliver.<br><br>

We didn't just wanna "sell" our services to the new client, we wanted to provide a valuable and comprehensive information, we even recommended (after a thoughtful research) the client to use a
third-party solution instead of letting us build one as it wouldn't be reasonable in terms of time and money involved.<br><br>

It was a great exercise of paying attention to details and covering issues the client is interessted in. I felt very confident during that day as the task was very similar to the services
I used to provide as a lawyer.

<div class="article-section-2"> Key learnings </div>

Being a consultant is often like being a lawyer. You need to spend time understanding the needs of the client and propose a solution designed for that particular person/company,
not a solution that you - for some reason - like the most. Think about every solution and piece of architecture a few times - is it complete? is it needed? is it what the clients wants? how is it supposed to communicate with other components?
 can we used a third-party service? My advice to others (and a key learning) would be - don't assume anything. In you are not sure if your solution meets the client's requirements,
 ask the client for details, don't blindly fill the blanks.

<div class="article-section"> Day 3 - gambling with react </div>

Day three was probably my favourite one. I joined one crater at an office of a betting company. We first joined a stand-up (didn't enjoy this part really, more below), picked up a story and worked on it most of the day.
The story was super fun - when a data about a football game comes in, it has information about the positions on which the players play (eg. Defender, Striker etc.).
We wanted to display the players in a right formation eg. 4-4-2 or 5-3-3.
My partner already had a hardcoded solution - the players were always displayed in 4-4-2 formation,
we were supposed to make it dynamic so that some teams would be displayed like this:<br>
<img src="http://newsimg.bbc.co.uk/media/images/41705000/gif/_41705404_4_4_2_416.gif"><br>
and some like this: <br>
<img src="http://newsimg.bbc.co.uk/media/images/41705000/gif/_41705436_5_3_2_416.gif"><br>

My cooperation with the crafter was awesome, we understood each other very well and discussed pros and cons of different solutions. He was very open to my suggestsions and -
I must show-off, sorry - we've picked "my" idea of the implementation and made it work! I am so happy and proud that I was able to come up with a flexible and effective solution.<br><br>
Some words about this solution :) <br>
We've decided that the players will be displayed in a grid. First, we specified the number of columns which basically equals the number of different types of players' positions. Then we've separated the players into groups,
one for a specific type of a player - and filled collumns with different types of players.
Then there was a question of rows - in each row there is a different number of players, so we've decided not to hardcode the number of rows either but to create a number of rows that matches the number of players in a particular column.
They we've aliged it and voila!<br><br>

It was a much more effective solution than the other that were considered (ie. hardcoding the rows, having many pre-written grids for different formations and filling them (it wasn't a good solution because you never know if there won't be any new, unexpected formation / crazy name of position (eg. defensive striker xP))).<br><br>

Also, React was awesome, very intuitive! Even though I never used it, I felt pretty confident in writing React code. Seriously, I could write a short story about how good that coding was...<br><br>

There was only one thing I didn't like that day - the office's vibe. I've mentioned that I didn't much liked the stand-up. Actually, not only the stand-up, I didn't like the all-hands meeting either. The problem was thet there I saw less than 5 women in the office and probably more tham 50 men.
I felt a bit uncomfortable in that environment and I know that "this is how the real software world looks like yo deal with it blah blah blah" that people told me, but still - not only they were mostly male,
but also there was this "guys-bro" vibe that made me feel that I didn't belong. However, I feel that I could get used to that and knowing my character,
maybe could help bringing some changes onboard.

<img src="http://www.comingsoon.net/assets/uploads/2018/01/justice_league_2017___diana_hq___v2_by_duck_of_satan-db3kq6k.jpg" width="100%">
<div class="article-section-2"> Key learnings </div>

Of course I learned some React, but it wasn't the most important experience in my eyes.
For me the key learning was working side by side with an experienced crafter, without any complexes. I learned not to be afraid to stand by my ideas if I find them right and not giving up on them easily.
I've learned the importance of asking questions when I get lost, because only this way I was able to stay involved and contribute.
I learned that pairing is the best working when both people carefully listen to each other and are open to new ideas.<br><br>

There was also one more thing - I was observing my partner answering quite random (in my eyes) questions many times during the day. He was clearly a to-go-person helping many people around.
He was calm and helpful all the time what was super impressive. I don't think that I could work like that now (I would probably get a bit angry that prople don't slack me with precise questions but instead come to chat unexpected),
but I hope that one day I will learn it.

<div class="article-section"> Day 4 - debugging a chat bot. </div>

I woke up all tired, probably too many emotions from the day before. On that day I was pairing with one of the gentlest and most open to cooperation people in the whole 8th Light and I wanted to do my best to make this day awesome to both of us,
but I felt that I couldn't. Not only was I tired, but also my partner was pretty down after a few days of very intensive work. Not only were we both tired,
but also we encountered a big bug in like first 30 minutes of coding. The code was building on one branch, while not building on another, even though it was supposed to.
We needed to go commit-by-commit, each time building the program again, to find the bug. We found it and fix it after a few hours what was a huge success :) Then I've attended 2 hours of meetings that weren't mostly very interessting since I didn't know much about the problems discussed,
but it was worth attending anyway to see how developers present and discuss problematic issues and how they give feedback.

<div class="article-section-2"> Key learnings </div>

Don't give up. When facing a bug, don't panic. Just go step by step and debug it. If needed, revert and introduce changes one by one to find the problematic one.
When pairing on failing code, make sure to keep the spirits up, ask questions to each other and "think out loud" - it helps a lot!

<div class="article-section"> Day 5 - debugging a failing test </div>

As we have WAZA time (4hrs to work on coding project of choosing) on Fridays, my final day of pairing was rather short. I've visited the betting company for the second time, but this time with another crafter.
We've had a failing integration test and were supposed to understand why it's failing and fix it. We've started with going line by line through the code, discussing what the code is doing,
whether we actually need this code and how to make it more readable (it was soooo badly written).<br><br>

We did hell of refactoring, even build our own test matchers! We changed all the code that we needed, refactored the test so that it was clear what it's doing and testing and still
the code wasn't passing. What is more, it wasn't passing for another reason than the one we were told it's not passing. So we contacted other team members and ... it wasn't supposed to pass at all.
<img src="https://memegenerator.net/img/instances/36977225.jpg" width="100%"><br>
Long story short, this wasn't a good test, the system needs big changes to make it more bug-proof and understandable to other developers.<br><br>

We had many short converations about testing and refactoring, which I found very usefull. I feel that I grew as a developer thanks to this short experience of refactoring and debugging a very trashy code.

<div class="article-section-2"> Key learnings </div>

Communicate with your team before you start working on some problem/feature so that you don't work on something that you're not asked to.
If you have problems understanding a code you're supposed to debug, refactor it first to make it more readable, debugging will get easier :)
